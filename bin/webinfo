#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# Webinfo
# -----------------------------------------------------------------------------
# $Id$
#
# -----------------------------------------------------------------------------
# kaa.webinfo - Receive Metadata from the Web
# Copyright (C) 2009 Dirk Meyer
#
# First Edition: Dirk Meyer <dischi@freevo.org>
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# Please see the file AUTHORS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

import re
import os
import sys
import getopt

import kaa
import kaa.metadata
import kaa.webmetadata
import kaa.beacon

class SearchResult(object):
    pass

@kaa.coroutine()
def main():
    yield kaa.beacon.connect()

    opts, args = getopt.gnu_getopt(sys.argv[1:], '', ['sync', 'search', 'match', 'guess' ])
    for o, a in opts:
        if o == '--sync':
            # Sync the db. Call this every day or so
            yield kaa.webmetadata.sync()
            sys.exit(0)

        if o == '--search':
            # webinfo --search list of filenames
            for filename in args:
                print 'Trying to find information for', os.path.basename(filename)
                metadata = kaa.metadata.parse(filename)
                result = yield kaa.webmetadata.tv.search(filename)
                if len(result) == 0:
                    print 'error: unable to get any additional information'
                    sys.exit(0)
                if result:
                    for entry in result:
                        print ' %s %s (%s)' % (entry.id, entry.name, entry.year)
            sys.exit(0)

        if o == '--match':
            result = SearchResult()
            result.id, filename = args
            yield kaa.webmetadata.match(filename, result)
            # sleep 0.2 seconds for the db to sync
            yield kaa.delay(0.2)
            sys.exit(0)

        if o == '--guess':
            for item in (yield kaa.beacon.query(type='video')):
                if not item.filename:
                    continue
                if not kaa.webmetadata.parse(item.filename, item):
                    print item.filename,
                    sys.stdout.flush()
                    result = yield kaa.webmetadata.search(item.filename, item)
                    if len(result) == 1:
                        print 'found'
                        yield kaa.webmetadata.match(item.filename, result[0])
                    else:
                        print 'failure'
            sys.exit(0)

    for filename in args:
        print filename
        metadata = kaa.webmetadata.parse(filename)
        if metadata:
            for key, value in metadata.items():
                if key in ('posters', 'images', 'banner'):
                    print ' ', kaa.unicode_to_str(u'%s:' % key)
                    for image in value:
                        print '   ', kaa.unicode_to_str(image.url or image.thumbnail)
                elif repr(value):
                    print ' ', kaa.unicode_to_str(u'%s: %s' % (key, value))
            print
            continue
        print filename, 'not found'
        print
    sys.exit(0)

main()
kaa.main.run()
